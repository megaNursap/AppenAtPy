pipeline {
  agent { label 'docker' }

   options{
    ansiColor('xterm')
    disableConcurrentBuilds()
    timeout(time: 50, unit: 'MINUTES')
  }

  environment {
      ECR_URL = "411719562396.dkr.ecr.us-east-1.amazonaws.com"
      IMAGE_REPO = "qa-automation"
      IMAGE_NAME = "qa-automation"
      TAG = "$TAG"
      GIT_SHA7 = "${GIT_COMMIT[0..6]}"
      TIMESTAMP = "${new Date(currentBuild.startTimeInMillis).format("yyMMddHHmmssSSS")}"
      DATE_SHA_TAG = "$TIMESTAMP-$GIT_SHA7"
      CURRENT_BUILD_IMAGE_NAME = "$IMAGE_REPO:$TAG"
      TIMESTAMPED_IMAGE_NAME = "$IMAGE_REPO:$DATE_SHA_TAG"
      MASTER_IMAGE_NAME = "$IMAGE_REPO:master"
      RANDOM_NUMBER = "${Math.abs(new Random().nextInt() % 1000) +100}"
   }
  stages {
     stage('Start tests') {
         steps {
                echo "Starting docker..."
                sh """
                  set +x
                  \$(aws ecr get-login --no-include-email --region us-east-1)
                  set -xe
                  set +e
                  docker run --name  qa-automation-${TIMESTAMP} ${ECR_URL}/qa-automation:${TAG} env TEST_ENV=${ENV} WAIT_CONFIG_TYPE=${WAIT_CONFIG_TYPE} WAIT_TIME=${WAIT_TIME}  locust -f adap/deprecated/performance/tasks/${FILE_NAME}.py --no-web --clients=${CLIENTS} --run-time=${RUNTIME}m --hatch-rate=${HATCH_RATE} --csv=results/report --only-summary
                  docker cp qa-automation-${TIMESTAMP}:/srv/results .
                  docker rm -f qa-automation-${TIMESTAMP}
                  docker rmi -f ${ECR_URL}/qa-automation:${TAG}
                 """
                archiveArtifacts artifacts: 'results/', allowEmptyArchive: true
          }
     }
  }
}
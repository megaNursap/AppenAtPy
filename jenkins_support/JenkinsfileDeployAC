pipeline {
  agent { label 'docker' }

   options{
    ansiColor('xterm')
    timeout(time: 70, unit: 'MINUTES')
  }

  environment {
      ECR_URL = "411719562396.dkr.ecr.us-east-1.amazonaws.com"
      AWS_ACCOUNT = "411719562396"
      IMAGE_REPO = "qa-automation"
      IMAGE_NAME = "qa-automation"
      TAG = "$TAG"
      GIT_SHA7 = "${GIT_COMMIT[0..6]}"
      TIMESTAMP = "${new Date(currentBuild.startTimeInMillis).format("yyMMddHHmmssSSS")}"
      DATE_SHA_TAG = "$TIMESTAMP-$GIT_SHA7"
      CURRENT_BUILD_IMAGE_NAME = "$IMAGE_REPO:$TAG"
      TIMESTAMPED_IMAGE_NAME = "$IMAGE_REPO:$DATE_SHA_TAG"
      MASTER_IMAGE_NAME = "$IMAGE_REPO:master"
      RANDOM_NUMBER = "${Math.abs(new Random().nextInt() % 1000) +100}"
   }
  stages {
     stage('Start tests') {
         steps {
                echo "Starting docker..."
                withCredentials([string(credentialsId: 'qa_automation_key',variable: 'QA_KEY')]){
                    sh """
                      set +x
                      \$(aws ecr get-login --registry-ids $AWS_ACCOUNT --no-include-email --region us-east-1)
                      set -xe
                      set +e
                      docker image ls
                      docker ps -a
                      docker run --name qa-automation-${SERVICE}-${TIMESTAMP} --shm-size=2g ${ECR_URL}/qa-automation:${TAG} /srv/jenkins_support/run_deploy_crp_ac.sh ac_${ENV} ${SERVICE} ${QA_KEY} ${BUILD_URL} ${CRP} ${JIRA} ${DEPLOYMENT_URL}
                      docker cp qa-automation-${SERVICE}-${TIMESTAMP}:/srv/result .
                      docker cp qa-automation-${SERVICE}-${TIMESTAMP}:/srv/allure_report .
                      docker cp qa-automation-${SERVICE}-${TIMESTAMP}:/srv/adap/Failed_scenarios .
                      docker cp qa-automation-${SERVICE}-${TIMESTAMP}:/srv/allure_result_folder .
                      docker rm -f qa-automation-${SERVICE}-${TIMESTAMP}
                      docker rmi -f ${ECR_URL}/qa-automation:${TAG}
                      docker image ls
                      ls
                     """
                     publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'result/',
                            reportFiles: 'report.html',
                            reportName: 'Pytest report',
                            includes: '**/*',
                            reportTitles: ''
                    ])
                     allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: 'allure_result_folder']]
                    ])
                    junit 'result/*.xml'
                    archiveArtifacts artifacts: 'Failed_scenarios/', allowEmptyArchive: true
              }
          }
     }
  }
}
